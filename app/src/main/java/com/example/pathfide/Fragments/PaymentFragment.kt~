package com.example.pathfide.Fragments

import android.Manifest
import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import com.example.pathfide.Model.UploadResponse
import com.example.pathfide.R
import com.example.pathfide.network.ApiService
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.RequestBody.Companion.asRequestBody
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.io.File
import java.text.SimpleDateFormat
import java.util.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class PaymentFragment : Fragment() {

    private lateinit var db: FirebaseFirestore
    private var therapistId: String? = null
    private var paymentProofUri: Uri? = null
    private var sessionId: String? = null

    private lateinit var tvRate: TextView
    private lateinit var imgGcashQr: ImageView
    private lateinit var imgPaymentProof: ImageView
    private lateinit var uploadProofPayment: EditText
    private lateinit var btnSubmitPayment: Button
    private lateinit var loadingOverlay: FrameLayout

    private lateinit var pickImageLauncher: ActivityResultLauncher<Intent>

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_payment, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        db = FirebaseFirestore.getInstance()

        view.findViewById<TextView>(R.id.tvRate)?.also { tvRate = it }
        view.findViewById<ImageView>(R.id.imgGcashQr)?.also { imgGcashQr = it }
        view.findViewById<ImageView>(R.id.imgPaymentProof)?.also { imgPaymentProof = it }
        view.findViewById<EditText>(R.id.uploadProofPayment)?.also { uploadProofPayment = it }
        view.findViewById<Button>(R.id.btnSubmitPayment)?.also { btnSubmitPayment = it }
        view.findViewById<FrameLayout>(R.id.loadingOverlay)?.also { loadingOverlay = it }

        val args = arguments
        if (args != null) {
            therapistId = args.getString("therapistId")
            sessionId = args.getString("sessionId")
            fetchTherapistRate()
        }

        pickImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK && result.data != null) {
                val uri = result.data?.data
                if (uri != null) {
                    try {
                        requireContext().contentResolver.takePersistableUriPermission(
                            uri,
                            Intent.FLAG_GRANT_READ_URI_PERMISSION
                        )
                        paymentProofUri = uri
                        imgPaymentProof.setImageURI(paymentProofUri)
                        imgPaymentProof.visibility = View.VISIBLE
                        Log.d("PaymentFragment", "Selected Image URI: $paymentProofUri")
                    } catch (e: Exception) {
                        Log.e("PaymentFragment", "Error persisting URI: ${e.message}")
                    }
                } else {
                    Log.e("PaymentFragment", "Failed to get image URI")
                }
            }
        }

        uploadProofPayment.setOnClickListener { checkPermissionsAndOpenPicker() }
        btnSubmitPayment.setOnClickListener { uploadPaymentProof() }
    }

    private fun checkPermissionsAndOpenPicker() {
        Log.d("PaymentFragment", "Checking permissions and opening image picker.")
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            openImagePicker()
        } else {
            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED) {
                openImagePicker()
            } else {
                requestStoragePermission()
            }
        }
    }

    private fun requestStoragePermission() {
        Log.d("PaymentFragment", "Requesting storage permission.")
        ActivityCompat.requestPermissions(
            requireActivity(),
            arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
            REQUEST_STORAGE_PERMISSION
        )
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == REQUEST_STORAGE_PERMISSION) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                openImagePicker()
            } else {
                Toast.makeText(requireContext(), "Permission Denied", Toast.LENGTH_SHORT).show()
                Log.e("PaymentFragment", "Storage permission denied")
            }
        }
    }

    private fun openImagePicker() {
        Log.d("PaymentFragment", "Opening image picker.")
        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {
            addCategory(Intent.CATEGORY_OPENABLE)
            type = "image/*"
        }
        pickImageLauncher.launch(intent)
    }

    private fun fetchTherapistRate() {
        Log.d("PaymentFragment", "Fetching therapist rate for therapistId: $therapistId")
        if (therapistId.isNullOrEmpty()) {
            tvRate.text = "Not Available"
            Log.d("PaymentFragment", "Therapist ID is null or empty.")
            return
        }

        db.collection("users").document(therapistId!!)
            .get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    val rate = document.getString("physicianRate") ?: "Not Available"
                    tvRate.text = "₱$rate"
                    Log.d("PaymentFragment", "Fetched therapist rate: ₱$rate")
                } else {
                    tvRate.text = "Not Available"
                    Log.d("PaymentFragment", "No document found for therapistId.")
                }
            }
            .addOnFailureListener {
                tvRate.text = "Not Available"
                Log.e("PaymentFragment", "Error fetching therapist rate: ${it.message}")
            }
    }

    private fun uploadPaymentProof() {
        Log.d("PaymentFragment", "Attempting to upload payment proof.")
        if (paymentProofUri == null) {
            Toast.makeText(requireContext(), "Please select an image", Toast.LENGTH_SHORT).show()
            Log.e("PaymentFragment", "No image selected.")
            return
        }

        loadingOverlay.visibility = View.VISIBLE

        val file = getFileFromUri(paymentProofUri!!)
        if (file == null || !file.exists()) {
            Toast.makeText(requireContext(), "Invalid file selected", Toast.LENGTH_SHORT).show()
            loadingOverlay.visibility = View.GONE
            Log.e("PaymentFragment", "Invalid file selected.")
            return
        }

        Log.d("PaymentFragment", "Uploading file: ${file.absolutePath}")

        val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
        val body = MultipartBody.Part.createFormData("proof", file.name, requestFile)

        val retrofit = Retrofit.Builder()
            .baseUrl("https://crimsonflare.space/")
            .client(OkHttpClient())
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        val apiService = retrofit.create(ApiService::class.java)

        apiService.uploadProof(body).enqueue(object : Callback<UploadResponse> {
            override fun onResponse(call: Call<UploadResponse>, response: Response<UploadResponse>) {
                loadingOverlay.visibility = View.GONE
                if (response.isSuccessful && response.body()?.success == true) {
                    Log.d("PaymentFragment", "File uploaded successfully. URL: ${response.body()?.file_url}")
                    savePaymentToFirestore(response.body()?.file_url ?: "")
                } else {
                    Toast.makeText(requireContext(), "Upload failed", Toast.LENGTH_SHORT).show()
                    Log.e("PaymentFragment", "Upload failed. Response: ${response.message()}")
                }
            }

            override fun onFailure(call: Call<UploadResponse>, t: Throwable) {
                loadingOverlay.visibility = View.GONE
                Toast.makeText(requireContext(), "Error: ${t.message}", Toast.LENGTH_SHORT).show()
                Log.e("PaymentFragment", "Error uploading file: ${t.message}")
            }
        })
    }

    private fun getFileFromUri(uri: Uri): File? {
        var inputStream = requireContext().contentResolver.openInputStream(uri)
        if (inputStream == null) {
            Log.e("PaymentFragment", "Failed to open input stream from URI")
            return null
        }

        val tempFile = File(requireContext().cacheDir, "temp_image_${System.currentTimeMillis()}.jpg")

        try {
            tempFile.outputStream().use { output -> inputStream.copyTo(output) }
        } catch (e: Exception) {
            Log.e("PaymentFragment", "Error saving file: ${e.message}")
            return null
        }

        Log.d("PaymentFragment", "Saved file to: ${tempFile.absolutePath}")
        return tempFile
    }

    private fun savePaymentToFirestore(imageUrl: String) {
        Log.d("PaymentFragment", "Saving payment data to Firestore.")
        val clientId = FirebaseAuth.getInstance().currentUser?.uid ?: return

        val paymentData = hashMapOf(
            "therapistId" to therapistId,
            "clientId" to clientId,
            "amountPaid" to tvRate.text.toString(),
            "paymentProofUrl" to imageUrl,
            "paymentTimestamp" to SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date()),
            "status" to "Pending",
            "sessionId" to sessionId,

        )

        loadingOverlay.visibility = View.VISIBLE
        db.collection("payments").add(paymentData)
            .addOnSuccessListener {
                loadingOverlay.visibility = View.GONE
                Toast.makeText(requireContext(), "Payment submitted", Toast.LENGTH_SHORT).show()
                Log.d("PaymentFragment", "Payment successfully submitted.")

                // Navigate to the PaymentSuccessFragment
                viewLifecycleOwner.lifecycleScope.launch(Dispatchers.Main) {
                    delay(500)  // Small delay to ensure UI updates properly
                    Log.d("PaymentFragment", "Navigating to PaymentSuccessFragment.")
                    findNavController().navigate(R.id.action_paymentFragment_to_paymentSuccess)
                }
            }
            .addOnFailureListener {
                loadingOverlay.visibility = View.GONE
                Toast.makeText(requireContext(), "Payment failed", Toast.LENGTH_SHORT).show()
                Log.e("PaymentFragment", "Error saving payment: ${it.message}")
            }
    }

    companion object {
        private const val REQUEST_STORAGE_PERMISSION = 101
    }
}
